// <auto-generated />
using System;
using AmritaDb.Tipsy.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AmritaDb.Tipsy.Infrastructure.Migrations
{
    [DbContext(typeof(AmritaTipsyDbContext))]
    [Migration("20230818003556_ReceiptLine")]
    partial class ReceiptLine
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("website_url");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.ToTable("brand", "purchase");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("brand_history", "purchase");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.Delivery", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("date");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("external_id");

                    b.Property<bool>("IsDelivered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_delivered");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("order_id");

                    b.Property<string>("ShipperId")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("shipper_id");

                    b.Property<string>("TrackingId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("tracking_id");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShipperId");

                    b.ToTable("delivery", "purchase");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("delivery_history", "purchase");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("date");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_amount");

                    b.Property<string>("DiscountCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("discount_currency");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("expected_date");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("external_id");

                    b.Property<decimal>("GrandTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("grand_total_amount");

                    b.Property<string>("GrandTotalCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("grand_total_currency");

                    b.Property<decimal>("ItemDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("item_discount_amount");

                    b.Property<string>("ItemDiscountCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("item_discount_currency");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("SYSTEM")
                        .HasColumnName("modified_by");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("promo_code");

                    b.Property<decimal>("Shipping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("shipping_amount");

                    b.Property<string>("ShippingCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("shipping_currency");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("status_id");

                    b.Property<decimal>("StoreGrandTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("store_grand_total_amount");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("store_id");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("sub_total_amount");

                    b.Property<string>("SubTotalCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("sub_total_currency");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("tax_amount");

                    b.Property<string>("TaxCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("tax_currency");

                    b.Property<decimal>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_amount");

                    b.Property<string>("TotalCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("total_currency");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("order", "purchase");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("order_history", "purchase");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("cost_amount");

                    b.Property<string>("CostCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("cost_currency");

                    b.Property<string>("DeliveryId")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("delivery_id");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_amount");

                    b.Property<string>("DiscountCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("discount_currency");

                    b.Property<int>("NoOfUnits")
                        .HasColumnType("int")
                        .HasColumnName("no_of_units");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("order_id");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("product_id");

                    b.Property<decimal>("StoreTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("store_total_amount");

                    b.Property<decimal>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_amount");

                    b.Property<string>("TotalCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("total_currency");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_item", "purchase");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("order_item_history", "purchase");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.OrderStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.ToTable("order_status", "purchase");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("order_status_history", "purchase");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));

                    b.HasData(
                        new
                        {
                            Id = "01H7PKMMPRCGB7D65EYPKVAYMH",
                            Description = "New",
                            Name = "New"
                        },
                        new
                        {
                            Id = "01H7PKMNPMC0F7FD77DHK13T0V",
                            Description = "Pending Approval",
                            Name = "Pending Approval"
                        },
                        new
                        {
                            Id = "01H7PKMPP7608Q953DWESMTB14",
                            Description = "Approved",
                            Name = "Approved"
                        },
                        new
                        {
                            Id = "01H7PKMQNYMDYZBD9ANEWFHHHV",
                            Description = "Rejected",
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = "01H7PKMRNJA9VKTX6B684F7WXK",
                            Description = "Paid",
                            Name = "Paid"
                        },
                        new
                        {
                            Id = "01H7PKMSMY139E73SAJ1VASE2X",
                            Description = "Cancelled",
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = "01H7PKMTMKVK40YGYDE7AHBDAP",
                            Description = "In Transit",
                            Name = "In Transit"
                        },
                        new
                        {
                            Id = "01H7PKMVM9XNS6Y2V76DBCVG8G",
                            Description = "Received",
                            Name = "Received"
                        },
                        new
                        {
                            Id = "01H7PKMWKKP76KPDYZW5N5K6KZ",
                            Description = "Partially fulfilled",
                            Name = "Partially fulfilled"
                        },
                        new
                        {
                            Id = "01H7PKMXK8XT413F2P2HPSPNP5",
                            Description = "Completed",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = "01H7PKYCSPBKNQXNKPSY2B6BJG",
                            Description = "Returned",
                            Name = "Returned"
                        });
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.Settlement", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("memo");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Paid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("paid_amount");

                    b.Property<string>("PaidCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("paid_currency");

                    b.Property<string>("PaymentModeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("payment_mode_id");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentModeId");

                    b.ToTable("settlement", "purchase");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("settlement_history", "purchase");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("address_1");

                    b.Property<string>("Address2")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("address_2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("country");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(8,6)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<string>("PreferredCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("preferred_currency");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("state");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("website_url");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("zip_code");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.ToTable("supplier", "purchase");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("supplier_history", "purchase");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.SupplierContact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("ContactTypeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("contact_type_id");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("detail");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("supplier_id");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("supplier_contact", "purchase");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("supplier_contact_history", "purchase");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("address_1");

                    b.Property<string>("Address2")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("address_2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("country");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("state");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("zip_code");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.ToTable("customer", "retail");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("customer_history", "retail");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.CustomerContact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("ContactTypeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("contact_type_id");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("customer_id");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("detail");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("customer_contact", "retail");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("customer_contact_history", "retail");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("amount");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("memo");

                    b.Property<string>("PaymentModeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("payment_mode_id");

                    b.Property<string>("ReceiptId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("receipt_id");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("PaymentModeId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("payment", "retail");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("payment_history", "retail");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Receipt", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("date");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_amount");

                    b.Property<decimal>("GrandTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("grand_total_amount");

                    b.Property<decimal>("ItemDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("item_discount_amount");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("SYSTEM")
                        .HasColumnName("modified_by");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("promo_code");

                    b.Property<decimal>("Shipping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("shipping_amount");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("status_id");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("store_id");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("sub_total_amount");

                    b.Property<decimal>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreId");

                    b.ToTable("receipt", "retail");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("receipt_history", "retail");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.ReceiptLine", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("inventory_id");

                    b.Property<decimal>("Msrp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("msrp");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("qty");

                    b.Property<string>("ReceiptId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("receipt_id");

                    b.Property<string>("ShipmentId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("shipment_id");

                    b.Property<decimal>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("total");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("receipt_line", "retail");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("receipt_line_history", "retail");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.SaleStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.ToTable("sale_status", "retail");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("sale_status_history", "retail");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));

                    b.HasData(
                        new
                        {
                            Id = "01H7PKYDSN6HR02HNNJZQ2SEVF",
                            Description = "In Scan",
                            Name = "In Scan"
                        },
                        new
                        {
                            Id = "01H7PKYES5MB6TSXVNWGHY05M8",
                            Description = "Paid",
                            Name = "Paid"
                        },
                        new
                        {
                            Id = "01H7PKYFRXQHKA0MEH3WWNB3GG",
                            Description = "Ready for shipment",
                            Name = "Ready for shipment"
                        },
                        new
                        {
                            Id = "01H7PKYGR6C0YJC0RA9YYZ6JMG",
                            Description = "Shipped",
                            Name = "Shipped"
                        },
                        new
                        {
                            Id = "01H7PKYHQGXTAXYW6WMXB2QCR1",
                            Description = "Delivered",
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = "01H7PKYJQ2A3PQ5QJ33DWB0ZFX",
                            Description = "Cancelled",
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Shipment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("date");

                    b.Property<bool>("IsDelivered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_delivered");

                    b.Property<string>("ReceiptId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("receipt_id");

                    b.Property<string>("ShipperId")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("shipper_id");

                    b.Property<string>("TrackingId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("tracking_id");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("ShipperId");

                    b.ToTable("shipment", "retail");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("shipment_history", "retail");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Store", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("address_1");

                    b.Property<string>("Address2")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("address_2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("country");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsWarehouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_warehouse");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(8,6)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9,6)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<string>("PreferredCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("preferred_currency");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("state");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("website_url");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("zip_code");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.ToTable("store", "retail");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("store_history", "retail");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.StoreContact", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("ContactTypeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("contact_type_id");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("detail");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("store_id");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("StoreId");

                    b.ToTable("store_contact", "retail");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("store_contact_history", "retail");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("name");

                    b.Property<string>("ParentId")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("parent_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("slug");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("category", "stock");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("category_history", "stock");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("AisleLocation")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("aisle_location");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount");

                    b.Property<DateTime>("LatestRestockDate")
                        .HasColumnType("datetime2(7)")
                        .HasColumnName("latest_restock_date");

                    b.Property<int>("MaximumStockLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("max_stock_level");

                    b.Property<int>("MinimumStockLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("min_stock_level");

                    b.Property<decimal>("Msrp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("msrp");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValue(0m)
                        .HasColumnName("price");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("product_id");

                    b.Property<int>("QuantityAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("qty_available");

                    b.Property<int>("QuantityOnDisplay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("qty_on_display");

                    b.Property<int>("ReorderPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("reorder_point");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("store_id");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("inventory", "stock");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("inventory_history", "stock");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("name");

                    b.Property<string>("ProductTypeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("product_type_id");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("sku");

                    b.Property<string>("Upc")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("upc");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("product", "stock");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("product_history", "stock");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.ProductImage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("image_url");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("product_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("title");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_image", "stock");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("product_image_history", "stock");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.ProductType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("name");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("product_type", "stock");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("product_type_history", "stock");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Universal.ContactType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.ToTable("contact_type", "universal");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("contact_type_history", "universal");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));

                    b.HasData(
                        new
                        {
                            Id = "01H7PBQ3MBB6ZX1Y39TV6KPM5T",
                            Description = "Phone Number",
                            Name = "Phone"
                        },
                        new
                        {
                            Id = "01H7PBQ3MQ33DF64P8FDZJ6CCG",
                            Description = "Email Address",
                            Name = "Email"
                        },
                        new
                        {
                            Id = "01H7PBQ3MQRT5Q538QR2VCQZZT",
                            Description = "Fax Number",
                            Name = "Fax"
                        });
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Universal.Country", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("currency_code");

                    b.Property<string>("Iso3Code")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("iso3");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("iso");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("name");

                    b.Property<short?>("NumericCode")
                        .HasColumnType("smallint")
                        .HasColumnName("num_code");

                    b.Property<short>("PhoneCode")
                        .HasColumnType("smallint")
                        .HasColumnName("phone_code");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.ToTable("country", "universal");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("country_history", "universal");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));

                    b.HasData(
                        new
                        {
                            Id = "01H7PBQ3MQX3EBSHD7QPVZJ0H9",
                            CurrencyCode = "USD",
                            Iso3Code = "USA",
                            IsoCode = "US",
                            Name = "United States of America",
                            NumericCode = (short)840,
                            PhoneCode = (short)1
                        },
                        new
                        {
                            Id = "01H7PBQ3MR64WY2NKZH42K6YNX",
                            CurrencyCode = "GBP",
                            Iso3Code = "GBR",
                            IsoCode = "GB",
                            Name = "United Kingdom",
                            NumericCode = (short)826,
                            PhoneCode = (short)44
                        },
                        new
                        {
                            Id = "01H7PBQ3MRE96CH0CHH0T5VESH",
                            CurrencyCode = "EUR",
                            Iso3Code = "FRA",
                            IsoCode = "FR",
                            Name = "France",
                            NumericCode = (short)250,
                            PhoneCode = (short)33
                        },
                        new
                        {
                            Id = "01H7PBQ3MRF96R5ES7EYPWDTYX",
                            CurrencyCode = "MXN",
                            Iso3Code = "MEX",
                            IsoCode = "MX",
                            Name = "Mexico",
                            NumericCode = (short)484,
                            PhoneCode = (short)52
                        });
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Universal.PaymentMode", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.ToTable("payment_mode", "universal");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("payment_mode_history", "universal");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));

                    b.HasData(
                        new
                        {
                            Id = "01H7PCVP1HGHM93SX4HSW8EM2B",
                            Description = "Cash",
                            Name = "Cash"
                        },
                        new
                        {
                            Id = "01H7PCVQ1ERMXJJND16HKKHTKQ",
                            Description = "Cheque / Check",
                            Name = "Cheque"
                        },
                        new
                        {
                            Id = "01H7PCVR0R9723KKDRKGSRPRYS",
                            Description = "Wire Transfer",
                            Name = "Wire Transfer"
                        },
                        new
                        {
                            Id = "01H7PCVS01J4ZANSQHEKV658H1",
                            Description = "Credit Card",
                            Name = "Credit Card"
                        });
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Universal.Shipper", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.ToTable("shipper", "universal");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("shipper_history", "universal");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));

                    b.HasData(
                        new
                        {
                            Id = "01H7Y9WKT6KVNRRP0H8SF139DK",
                            Description = "Unites States Postal Services",
                            Name = "USPS"
                        },
                        new
                        {
                            Id = "01H7Y9WMT5PCJ8TQ6QDTPDAT4D",
                            Description = "FDX Corporation",
                            Name = "FedEx"
                        },
                        new
                        {
                            Id = "01H7Y9WNSKG2KF6WKJ98CY015P",
                            Description = "United Parcel Service",
                            Name = "UPS"
                        },
                        new
                        {
                            Id = "01H7Y9WPSBYTQ1SHVFF82H2553",
                            Description = "Deutsche Post AG",
                            Name = "DHL"
                        });
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Universal.State", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("char(5)")
                        .HasColumnName("code");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("varchar(26)")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("name");

                    b.Property<DateTime>("valid_from")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("valid_to")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("valid_to");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("state", "universal");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("state_history", "universal");
                                ttb
                                    .HasPeriodStart("valid_from")
                                    .HasColumnName("valid_from");
                                ttb
                                    .HasPeriodEnd("valid_to")
                                    .HasColumnName("valid_to");
                            }));
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.Delivery", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Purchase.Order", "Order")
                        .WithMany("Deliveries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Universal.Shipper", "Shipper")
                        .WithMany("Deliveries")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Order");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.Order", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Purchase.OrderStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Retail.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Purchase.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.OrderItem", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Purchase.Delivery", "Delivery")
                        .WithMany("OrderItems")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AmritaDb.Tipsy.Domain.Purchase.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Stock.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.Settlement", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Purchase.Order", "Order")
                        .WithMany("Settlements")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Universal.PaymentMode", "PaymentMode")
                        .WithMany("Settlements")
                        .HasForeignKey("PaymentModeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMode");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.SupplierContact", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Universal.ContactType", "ContactType")
                        .WithMany("SupplierContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Purchase.Supplier", "Supplier")
                        .WithMany("Contacts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.CustomerContact", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Universal.ContactType", "ContactType")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Retail.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Payment", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Universal.PaymentMode", "PaymentMode")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentModeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Retail.Receipt", "Receipt")
                        .WithMany("Payments")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMode");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Receipt", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Retail.Customer", "Customer")
                        .WithMany("Receipts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Retail.SaleStatus", "Status")
                        .WithMany("Receipts")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Retail.Store", "Store")
                        .WithMany("Receipts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Status");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.ReceiptLine", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Stock.Inventory", "Inventory")
                        .WithMany("ReceiptLines")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Retail.Receipt", "Receipt")
                        .WithMany("Lines")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Retail.Shipment", "Shipment")
                        .WithMany("ReceiptLines")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Receipt");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Shipment", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Retail.Receipt", "Receipt")
                        .WithMany("Shipments")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Universal.Shipper", "Shipper")
                        .WithMany("Shipments")
                        .HasForeignKey("ShipperId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Receipt");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.StoreContact", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Universal.ContactType", "ContactType")
                        .WithMany("StoreContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Retail.Store", "Store")
                        .WithMany("Contacts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.Category", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Stock.Category", "ParentCategory")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.Inventory", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Stock.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmritaDb.Tipsy.Domain.Retail.Store", "Store")
                        .WithMany("Inventories")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.Product", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Stock.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.ProductImage", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Stock.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.ProductType", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Stock.Category", "Category")
                        .WithMany("ProductTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Universal.State", b =>
                {
                    b.HasOne("AmritaDb.Tipsy.Domain.Universal.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.Delivery", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.Order", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Items");

                    b.Navigation("Settlements");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Purchase.Supplier", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Customer", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Receipt", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Payments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.SaleStatus", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Shipment", b =>
                {
                    b.Navigation("ReceiptLines");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Retail.Store", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Inventories");

                    b.Navigation("Orders");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.Inventory", b =>
                {
                    b.Navigation("ReceiptLines");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.Product", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Stock.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Universal.ContactType", b =>
                {
                    b.Navigation("CustomerContacts");

                    b.Navigation("StoreContacts");

                    b.Navigation("SupplierContacts");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Universal.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Universal.PaymentMode", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Settlements");
                });

            modelBuilder.Entity("AmritaDb.Tipsy.Domain.Universal.Shipper", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
